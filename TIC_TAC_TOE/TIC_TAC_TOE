import tkinter as tk
import random
from tkinter import messagebox

class TicTacToeGUI:
    def __init__(self, master):
        self.master = master
        self.master.title("Tic Tac Toe")

        self.current_player = 'X'
        self.board = [' ' for _ in range(9)]

        self.buttons = []
        for i in range(3):
            for j in range(3):
                button = tk.Button(master, text=' ', font=('Helvetica', 20), width=8, height=4,
                                   command=lambda i=i, j=j: self.make_move(i*3 + j))
                button.grid(row=i, column=j, sticky="nsew")
                self.buttons.append(button)

    def make_move(self, position):
        if self.board[position] == ' ':
            self.board[position] = self.current_player
            self.buttons[position].config(text=self.current_player)
            if self.check_winner(self.current_player):
                messagebox.showinfo("Game Over", f"Player {self.current_player} wins!")
                self.reset_game()
            elif ' ' not in self.board:
                messagebox.showinfo("Game Over", "It's a tie!")
                self.reset_game()
            else:
                if self.current_player == 'X':
                    self.current_player = 'O'
                    self.master.after(1000, self.ai_move)  # Delay for AI move
                else:
                    self.current_player = 'X'

    def ai_move(self):
        winning_move = self.find_winning_move('O')
        if winning_move is not None:
            self.make_move(winning_move)
        else:
            blocking_move = self.find_winning_move('X')
            if blocking_move is not None:
                self.make_move(blocking_move)
            else:
                empty_spots = [i for i in range(9) if self.board[i] == ' ']
                if empty_spots:
                    ai_choice = random.choice(empty_spots)
                    self.make_move(ai_choice)

    def find_winning_move(self, player):
        for i in range(9):
            if self.board[i] == ' ':
                self.board[i] = player
                if self.check_winner(player):
                    self.board[i] = ' '  # Reset the board after checking
                    return i
                self.board[i] = ' '  # Reset the board after checking
        return None

    def check_winner(self, player):
        for i in range(3):
            if all([self.board[i*3+j] == player for j in range(3)]):  # Check rows
                return True
            if all([self.board[j*3+i] == player for j in range(3)]):  # Check columns
                return True
        if all([self.board[i] == player for i in [0, 4, 8]]) or all([self.board[i] == player for i in [2, 4, 6]]):  # Check diagonals
            return True
        return False

    def reset_game(self):
        self.current_player = 'X'
        self.board = [' ' for _ in range(9)]
        for button in self.buttons:
            button.config(text=' ')


if __name__ == "__main__":
    root = tk.Tk()
    TicTacToeGUI(root)
    root.mainloop()
